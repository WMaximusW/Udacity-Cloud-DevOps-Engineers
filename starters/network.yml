Description: CD12352 - Infrastructure as Code Project - Network - TrungNQ72

Parameters:
  # EnvironmentName: TrungNQ72
  EnvironmentName:
    Description: TrungNQ72-Network-Project02
    Type: String

  # VpcCIDR
  VpcCIDR:
    Description: TrungNQ72-Network-VPC
    Type: String
    Default: 10.0.0.0/16

  PublicSubnet1CIDR:
    Description: TrungNQ72-Network-PublicSubnet1CIDR
    Type: String
    Default: 10.0.0.0/24

  PublicSubnet2CIDR:
    Description: TrungNQ72-Network-PublicSubnet2CIDR
    Type: String
    Default: 10.0.1.0/24

  PrivateSubnet1CIDR:
    Description: TrungNQ72-Network-PrivateSubnet1CIDR
    Type: String
    Default: 10.0.2.0/24

  PrivateSubnet2CIDR:
    Description: TrungNQ72-Network-PrivateSubnet2CIDR
    Type: String
    Default: 10.0.3.0/24

Resources:
  # VPC: #1
  # EnableDnsHostnames = true
  # Ref: VpcCIDR (Parameters)
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref VpcCIDR
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: !Ref EnvironmentName

  # InternetGateway: #2
  # Ref: EnvironmentName (Parameters)
  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: !Ref EnvironmentName

  # InternetGatewayAttachment: #2.1
  # Ref: VPC (#1)
  # Ref: InternetGateway (#2)
  InternetGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref InternetGateway
      VpcId: !Ref VPC

  # PublicSubnet1: #3.1
  # MapPublicIpOnLaunch = true
  # Ref: VPC (#1)
  # Ref: PublicSubnet1CIDR (Parameters)
  # Ref: EnvironmentName (Parameters)
  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [0, !GetAZs ""]
      CidrBlock: !Ref PublicSubnet1CIDR
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} Public Subnet (AZ1)

  # PrivateSubnet1: #3.2
  # MapPublicIpOnLaunch = false
  # Ref: VPC (#1)
  # Ref: PrivateSubnet1CIDR (Parameters)
  # Ref: EnvironmentName (Parameters)
  PrivateSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [0, !GetAZs ""]
      CidrBlock: !Ref PrivateSubnet1CIDR
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} Private Subnet (AZ1)

  # PublicSubnet2: #4.1
  # MapPublicIpOnLaunch = true
  # Ref: VPC (#1)
  # Ref: PublicSubnet2CIDR (Parameters)
  # Ref: EnvironmentName (Parameters)
  PublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [1, !GetAZs ""]
      CidrBlock: !Ref PublicSubnet2CIDR
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} Public Subnet (AZ2)

  # PrivateSubnet2: #4.2
  # MapPublicIpOnLaunch = false
  # Ref: VPC (#1)
  # Ref: PrivateSubnet2CIDR (Parameters)
  # Ref: EnvironmentName (Parameters)
  PrivateSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [1, !GetAZs ""]
      CidrBlock: !Ref PrivateSubnet2CIDR
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} Private Subnet (AZ2)

  # NatGateway1EIP: #5.1
  # Depend: InternetGatewayAttachment (#2.1)
  NatGateway1EIP:
    Type: AWS::EC2::EIP
    DependsOn: InternetGatewayAttachment
    Properties:
      Domain: vpc

  # NatGateway2EIP: #5.2
  # Depend: InternetGatewayAttachment (#2.1)
  NatGateway2EIP:
    Type: AWS::EC2::EIP
    DependsOn: InternetGatewayAttachment
    Properties:
      Domain: vpc

  # NatGateway1: #6.1
  # Ref: PublicSubnet1 (#3.1)
  # Ref: NatGateway1EIP (#5.1)
  NatGateway1:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt NatGateway1EIP.AllocationId
      SubnetId: !Ref PublicSubnet1

  # NatGateway2: #6.2
  # Ref: PublicSubnet2 (#3.2)
  # Ref: PrivateSubnet2 (#5.2)
  NatGateway2:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt NatGateway2EIP.AllocationId
      SubnetId: !Ref PublicSubnet2

  # >>> PUBLIC

  # PublicRouteTable: #7
  # Ref: VPC (#1)
  # Ref: EnvironmentName (Parameters)
  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} Public Routes

  # DefaultPublicRoute: #8
  # Ref: InternetGateway (#2)
  # Ref: InternetGatewayAttachment (#2.1)
  # Ref: PublicRouteTable (#7)
  DefaultPublicRoute:
    Type: AWS::EC2::Route
    DependsOn: InternetGatewayAttachment
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  # PublicSubnet1RouteTableAssociation: #9.1
  # Ref PublicSubnet1 (#3.1)
  # Ref PublicRouteTable (#7)
  PublicSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet1

  # PublicSubnet2RouteTableAssociation: #9.2
  # Ref PublicSubnet2 (#4.1)
  # Ref PublicRouteTable (#7)
  PublicSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet2

  # PRIVATE

  # PrivateRouteTable1: #10
  # Ref: VPC(#1)
  # Ref: EnvironmentName (Parameters)
  PrivateRouteTable1:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} Private Routes (AZ1)

  # DefaultPrivateRoute1: #11
  # Ref: VPC(#1)
  # Ref: NatGateway1 (#6.1)
  # Ref: PrivateRouteTable1 (#10)
  DefaultPrivateRoute1:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateRouteTable1
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NatGateway1

  # PrivateSubnet1RouteTableAssociation: #12
  # Ref: PrivateSubnet1 (#3.2)
  # Ref: PrivateRouteTable1 (#10)
  PrivateSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTable1
      SubnetId: !Ref PrivateSubnet1

  # PrivateRouteTable2: #13
  # Ref: VPC(#1)
  # Ref: EnvironmentName (Parameters)
  PrivateRouteTable2:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} Private Routes (AZ2)

  # DefaultPrivateRoute2: #14
  # Ref: NatGateway2 (#6.2)
  # Ref: PrivateRouteTable2 (#13)
  DefaultPrivateRoute2:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateRouteTable2
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NatGateway2

  # PrivateSubnet2RouteTableAssociation: #15
  # Ref: PrivateSubnet2 (#6.2)
  # Ref: PrivateRouteTable2 (#13)
  PrivateSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTable2
      SubnetId: !Ref PrivateSubnet2

Outputs:
  # VPC: From (#1)
  VPC:
    Description: Return VPC ID
    Value: !Ref VPC
    Export:
      Name: !Sub ${EnvironmentName}-VPCID

  # PrivateSubnets: From (#3.2,#4.2)
  PrivateSubnets:
    Description: Return private subnets
    Value: !Join [",", [!Ref PrivateSubnet1, !Ref PrivateSubnet2]]
    Export:
      Name: !Sub ${EnvironmentName}-PRIVATE-SUBNETS

  # PublicSubnet1: From (#3.1)
  PublicSubnet1:
    Description: Return public subnet in AZ1
    Value: !Ref PublicSubnet1
    Export:
      Name: !Sub ${EnvironmentName}-PUBLIC-SUBNET-1

  # PublicSubnet2: From (#4.1)
  PublicSubnet2:
    Description: Return public subnet in AZ2
    Value: !Ref PublicSubnet2
    Export:
      Name: !Sub ${EnvironmentName}-PUBLIC-SUBNET-2
